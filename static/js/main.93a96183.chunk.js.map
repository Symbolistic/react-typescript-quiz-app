{"version":3,"sources":["images/bg.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93a96183.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.3d01ea63.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n\tcategory: string;\r\n\tcorrect_answer: string;\r\n\tdifficulty: string;\r\n\tincorrect_answers: string[];\r\n\tquestion: string;\r\n\ttype: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n\tEASY = 'easy',\r\n\tMEDIUM = 'medium',\r\n\tHARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n\tamount: number,\r\n\tdifficulty: Difficulty\r\n) => {\r\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\tconst data = await (await fetch(endpoint)).json();\r\n\treturn data.results.map((question: Question) => ({\r\n\t\t...question,\r\n\t\tanswers: shuffleArray([\r\n\t\t\t...question.incorrect_answers,\r\n\t\t\tquestion.correct_answer,\r\n\t\t]),\r\n\t}));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n\t[...array].sort(() => Math.random() - 0.5);\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n\tmax-width: 1100px;\r\n\tbackground: #ebfeff;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #0085a3;\r\n\tpadding: 20px;\r\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n\ttext-align: center;\r\n\r\n\tp {\r\n\t\tfont-size: 1rem;\r\n\t}\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n\tcorrect: boolean;\r\n\tuserClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n\ttransition: all 0.3s ease;\r\n\r\n\t:hover {\r\n\t\topacity: 0.8;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tcursor: pointer;\r\n\t\tuser-select: none;\r\n\t\tfont-size: 0.8rem;\r\n\t\twidth: 100%;\r\n\t\theight: 40px;\r\n\t\tmargin: 5px 0;\r\n\t\tbackground: ${({ correct, userClicked }) =>\r\n\t\t\tcorrect\r\n\t\t\t\t? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n\t\t\t\t: !correct && userClicked\r\n\t\t\t\t? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n\t\t\t\t: 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n\r\n\t\tborder: 3px solid #fff;\r\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n\t\tborder-radius: 10px;\r\n\t\tcolor: #fff;\r\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n\t}\r\n`;\r\n","import React from 'react';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n// Types\r\nimport { AnswerObject } from '../App';\r\n\r\ntype Props = {\r\n\tquestion: string;\r\n\tanswers: string[];\r\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n\tuserAnswer: AnswerObject | undefined;\r\n\tquestionNr: number;\r\n\ttotalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n\tquestion,\r\n\tanswers,\r\n\tcallback,\r\n\tuserAnswer,\r\n\tquestionNr,\r\n\ttotalQuestions,\r\n}) => (\r\n\t<Wrapper>\r\n\t\t<p className='number'>\r\n\t\t\tQuestion: {questionNr} / {totalQuestions}\r\n\t\t</p>\r\n\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\r\n\r\n\t\t<div>\r\n\t\t\t{answers.map((answer) => (\r\n\t\t\t\t<ButtonWrapper\r\n\t\t\t\t\tkey={answer}\r\n\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\r\n\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\r\n\t\t\t\t>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tdisabled={userAnswer ? true : false}\r\n\t\t\t\t\t\tvalue={answer}\r\n\t\t\t\t\t\tonClick={callback}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</ButtonWrapper>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t</Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml{\r\n    height: 100%;\r\n}\r\n\r\nbody{\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\taline-items: center > p {\r\n\t\tcolor: #fff;\r\n\t}\r\n\r\n\t.score {\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 2rem;\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\th1 {\r\n\t\tfont-family: Fascinate Inline, sans-serif;\r\n\t\tbackground-image: linear-gradient(180deg, #fff, #87f1ff);\r\n\t\tbackground-size: 100%;\r\n\t\tbackground-clip: text;\r\n\t\t-webkit-background-clip: text;\r\n\t\t-webkit-text-fill-color: transparent;\r\n\t\t-moz-background-clip: text;\r\n\t\t-moz-text-fill-color: transparent;\r\n\t\tfilter: drop-shadow(2px 2px #0085a3);\r\n\t\tfont-size: 70px;\r\n\t\tfont-weight: 400;\r\n\t\ttext-align: center;\r\n\t\tmargin: 20px;\r\n\t}\r\n\r\n\t.start,\r\n\t.next {\r\n\t\tcursor: pointer;\r\n\t\tbackground: linear-gradient(180deg, #fff, #ffcc91);\r\n\t\tborder: 2px solid #d38558;\r\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n\t\tborder-radius: 10px;\r\n\t\theight: 40px;\r\n\t\tmargin: 20px 0;\r\n\t\tpadding: 0 40px;\r\n\t}\r\n\r\n\t.start {\r\n\t\tmax-width: 200px;\r\n\t}\r\n`;\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconsole.log(questions);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t// Users answer\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\t// Check answer against correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\tconsole.log(answer);\n\t\t\t// Add score if answer is correct\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\t\t\t// Save answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\t// Move onto the next question if not the last question\n\t\tconst nextQuestion = number + 1;\n\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>React Quiz</h1>\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\n\t\t\t\t{!gameOver ? <p className='score'>Score: {score}</p> : null}\n\n\t\t\t\t{loading && <p>Loading Questions...</p>}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNr={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{!gameOver &&\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}